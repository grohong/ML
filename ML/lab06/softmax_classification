import tensorflow

x_data = [[1, 2, 1, 1], [2, 1, 3, 2], [3, 1, 3, 4], [4, 1, 5, 5], [1, 7, 5, 5], [1, 2, 5, 6], [1, 6, 6, 6], [1, 7, 7, 7]]
y_data = [[0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 1, 0], [0, 1, 0], [0, 1, 0], [1, 0, 0], [1, 0, 0]]

X = tensorflow.placeholder("float", [None, 4])
Y = tensorflow.placeholder("float", [None, 3])
nb_classes = 3

W = tensorflow.Variable(tensorflow.random_normal([4, nb_classes]), name='weight')
b = tensorflow.Variable(tensorflow.random_normal([nb_classes]), name='bias')

hypothesis = tensorflow.nn.softmax(tensorflow.matmul(X, W) + b)

cost = tensorflow.reduce_mean(-tensorflow.reduce_sum(Y*tensorflow.log(hypothesis), axis=1))
optimizer = tensorflow.train.GradientDescentOptimizer(learning_rate=0.1).minimize(cost)

with tensorflow.Session() as session:
    session.run(tensorflow.global_variables_initializer())

    for step in range(2001):
        session.run(optimizer, feed_dict={X: x_data, Y: y_data})
        if step%200 == 0:
            print(step, session.run(cost, feed_dict={X: x_data, Y: y_data}))

    all = session.run(hypothesis, feed_dict={X: [[1, 11, 7, 9],
                                               [1, 3, 4, 3],
                                               [1, 1, 0, 1]]})
    print(all, session.run(tensorflow.arg_max(all, 1)))